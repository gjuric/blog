System logging with PHP-FPM

In this article I will try to summarize all of the options available for logging your PHP applications. When I say logging I am not talking about client libraries like Monolog but system logging from the PHP engine itself (warious errors, warnings and notices) as well as the logging from PHP-FPM which handles pools of PHP workers. Those errors, warnings and notices can also be triggered from code by using (trigger_error)(http://php.net/manual/en/function.trigger_error.php).


PHP-FPM

By default PHP-FPM logs messages about the FPM process and the child workers he manages, the logs look like this:

    [02-Sep-2016 10:10:09] NOTICE: configuration file /etc/php5/fpm/php-fpm.conf test is successful
    [02-Sep-2016 10:10:09] NOTICE: fpm is running, pid 22752
    [02-Sep-2016 10:10:09] NOTICE: ready to handle connections
    [02-Sep-2016 10:10:09] NOTICE: systemd monitor interval set to 10000ms
    [02-Sep-2016 10:45:32] WARNING: [pool www] child 14799 exited on signal 15 (SIGTERM) after 1190.148240 seconds from start
    [02-Sep-2016 10:45:32] NOTICE: [pool www] child 14848 started
    [02-Sep-2016 11:32:12] WARNING: [pool www] child 14798, script '/srv/www/app.php' (request: "GET /app.php") execution timed out (34.884118 sec), terminating

The [global] section of PHP-FPM config file (/etc/php5/fpm/php-fpm.conf on Debian like distributions) has some options to setup logging:

    ; Error log file
    ; If it's set to "syslog", log is sent to syslogd instead of being written
    ; in a local file.
    ; Note: the default prefix is /var
    ; Default Value: log/php-fpm.log
    error_log = /var/log/php5-fpm.log

    ; syslog_facility is used to specify what type of program is logging the
    ; message. This lets syslogd specify that messages from different facilities
    ; will be handled differently.
    ; See syslog(3) for possible values (ex daemon equiv LOG_DAEMON)
    ; Default Value: daemon
    ;syslog.facility = daemon

    ; syslog_ident is prepended to every message. If you have multiple FPM
    ; instances running on the same server, you can change the default value
    ; which must suit common needs.
    ; Default Value: php-fpm
    ;syslog.ident = php-fpm

    ; Log level
    ; Possible Values: alert, error, warning, notice, debug
    ; Default Value: notice
    ;log_level = notice

As you can see, there is also an option to send those messages to syslog instead of writing them to file directly.


PHP

PHP workers that are managed by FPM and run you application when accessed via web get their logging settings from /etc/php5/fpm/php.ini. Of course you can override these settings for each pool of workers you have defined if you want them to differ. The scripts run from CLI get these settings from /etc/php5/cli/php.ini.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Error handling and logging ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This directive informs PHP of which errors, warnings and notices you would like
; it to take action for. The recommended way of setting values for this
; directive is through the use of the error level constants and bitwise
; operators. The error level constants are below here for convenience as well as
; some common settings and their meanings.
; By default, PHP is set to take action on all errors, notices and warnings EXCEPT
; those related to E_NOTICE and E_STRICT, which together cover best practices and
; recommended coding standards in PHP. For performance reasons, this is the
; recommend error reporting setting. Your production server shouldn't be wasting
; resources complaining about best practices and coding standards. That's what
; development servers and development settings are for.
; Note: The php.ini-development file has this setting as E_ALL. This
; means it pretty much reports everything which is exactly what you want during
; development and early testing.
;
; Error Level Constants:
; E_ALL             - All errors and warnings (includes E_STRICT as of PHP 5.4.0)
; E_ERROR           - fatal run-time errors
; E_RECOVERABLE_ERROR  - almost fatal run-time errors
; E_WARNING         - run-time warnings (non-fatal errors)
; E_PARSE           - compile-time parse errors
; E_NOTICE          - run-time notices (these are warnings which often result
;                     from a bug in your code, but it's possible that it was
;                     intentional (e.g., using an uninitialized variable and
;                     relying on the fact it's automatically initialized to an
;                     empty string)
; E_STRICT          - run-time notices, enable to have PHP suggest changes
;                     to your code which will ensure the best interoperability
;                     and forward compatibility of your code
; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup
; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's
;                     initial startup
; E_COMPILE_ERROR   - fatal compile-time errors
; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)
; E_USER_ERROR      - user-generated error message
; E_USER_WARNING    - user-generated warning message
; E_USER_NOTICE     - user-generated notice message
; E_DEPRECATED      - warn about code that will not work in future versions
;                     of PHP
; E_USER_DEPRECATED - user-generated deprecation warnings
;
; Common Values:
;   E_ALL (Show all errors, warnings and notices including coding standards.)
;   E_ALL & ~E_NOTICE  (Show all errors, except for notices)
;   E_ALL & ~E_NOTICE & ~E_STRICT  (Show all errors, except for notices and coding standards warnings.)
;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)
; Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED
; Development Value: E_ALL
; Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT
; http://php.net/error-reporting
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT

; This directive controls whether or not and where PHP will output errors,
; notices and warnings too. Error output is very useful during development, but
; it could be very dangerous in production environments. Depending on the code
; which is triggering the error, sensitive information could potentially leak
; out of your application such as database usernames and passwords or worse.
; It's recommended that errors be logged on production servers rather than
; having the errors sent to STDOUT.
; Possible Values:
;   Off = Do not display any errors
;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)
;   On or stdout = Display errors to STDOUT
; Default Value: On
; Development Value: On
; Production Value: Off
; http://php.net/display-errors
display_errors = Off

; The display of errors which occur during PHP's startup sequence are handled
; separately from display_errors. PHP's default behavior is to suppress those
; errors from clients. Turning the display of startup errors on can be useful in
; debugging configuration problems. But, it's strongly recommended that you
; leave this setting off on production servers.
; Default Value: Off
; Development Value: On
; Production Value: Off
; http://php.net/display-startup-errors
display_startup_errors = Off

; Besides displaying errors, PHP can also log errors to locations such as a
; server-specific log, STDERR, or a location specified by the error_log
; directive found below. While errors should not be displayed on productions
; servers they should still be monitored and logging is a great way to do that.
; Default Value: Off
; Development Value: On
; Production Value: On
; http://php.net/log-errors
log_errors = On

; Set maximum length of log_errors. In error_log information about the source is
; added. The default is 1024 and 0 allows to not apply any maximum length at all.
; http://php.net/log-errors-max-len
log_errors_max_len = 1024


Catching worker output (does not affect nginx)

The pool definition catch_workers_output (http://php.net/manual/en/install.fpm.configuration.php#catch-workers-output) catches all of the error messages generated by your code and stores them in the same location where your PHP-FPM errors are stored. This makes the FPM log messy since the messages from the FPM itself are mixed with the messages from the PHP engine.


Store PHP errors in a separate file (affects nginx)

By defining a separate error_log directive for PHP-FPM workers in /etc/php5/fpm/php.ini we can send only the error generated by PHP into a separate file thus achieving the separation of error messages generated by PHP-FPM and PHP itself. 

    log_errors = on
    php_admin_value[error_log] = /var/log/php5/error.log

You can also do this on a per pool basis with:

    php_admin_flag[log_errors] = on
    php_admin_value[error_log] = /var/log/php5/pool_name.error.log

One thing to be aware of in this case. Either the folder where you store log files must have read/write permission for the user which is running PHP or the log file must be created manualy and the ownership set to the user running PHP (usually www-data on Debian systems).

The main downside to this approach it that nginx will not receive errors anymore.



TODO:

- slowlog:

slowlog = /var/log/php5/slow.log
request_slowlog_timeout = 10s

- access log:


- permission issues will not be reported, they fail silently
- display errors: http://serverfault.com/questions/387068/how-to-configure-php-fpm-to-log-logs-to-log-files-configured-in-nginx-virtualhos
http://www.tothenew.com/blog/php5-fpm-logging/



